JIRA_TICKETS = [
  {
    "Title":"Learning the issue + milestone system of GitLab",
    "Description":r"""The team studies the capabilities of the issue system in GitLab""",
    "Issue ID":1,
    "State":"Closed"
  },
  {
    "Title":"Learning the Wiki system of GitLab",
    "Description":r"""Group members study and experiment with the Wiki functionality of GitLab for project documentation""",
    "Issue ID":2,
    "State":"Closed"
  },
  {
    "Title":"Feature: Scheduling",
    "Description":r"""This is the scheduling feature of the application which includes:\n- Task 1: Create scheduling interface.\n- Task 2: Implement date and time picker.\n- Task 3: Develop reminder functionality.""",
    "Issue ID":5,
    "State":"Open"
  },
  {
    "Title":"Create scheduling interface",
    "Description":r"""The objective of this task is to design and implement a user-friendly scheduling interface within the virtual bullet journal. The scheduling interface serves as a central hub for users to efficiently manage and organize their tasks, events, and deadlines.\n\n Key Features\n\n Calendar View\n- A visually intuitive calendar that provides an overview of scheduled events.\nUsers can navigate seamlessly between days, weeks, and months.\nTask Entry:\n- Easy-to-use forms for adding new tasks and events to the calendar.\nOptions to input task details such as title, description, and associated deadlines.\nDrag-and-Drop Functionality:\n- Intuitive drag-and-drop features for effortless rescheduling of tasks.\nUsers can easily rearrange events within the calendar view.\n\n Time Picker\n- Integration of a user-friendly time picker for precise scheduling.\nUsers can select specific times for appointments, meetings, and deadlines.\nColor Coding:\n- Visual differentiation through color-coding for various types of tasks or events.\nEnhances user experience and helps in quick identification.\nReminder Integration:\n- Seamless integration with the reminder system.\n- Users can set up reminders directly from the scheduling interface.\nImplementation Details:\n\n Frontend components\n- Use modern frontend frameworks such as React or Vue.js for building responsive and dynamic scheduling components.\nEnsure a clean and intuitive user interface with thoughtful placement of elements.\nBackend Integration:\n- Connect the scheduling interface to the backend server to store and retrieve scheduling data.\nImplement RESTful API endpoints for CRUD (Create, Read, Update, Delete) operations related to scheduling.\n\n Database Schema\n- Design an efficient database schema to store scheduling-related information, considering factors like user association, task details, and timestamps.\n\n Testing\nConduct thorough testing of the scheduling interface to ensure functionality across various devices and browsers.\nTest scenarios should cover task creation, editing, deletion, and responsive behavior.\n\n User Feedback\n- Incorporate user feedback during the development process to refine and enhance the scheduling interface.\n- Consider usability studies and iterate based on user experience insights.\n\n Acceptance criteria\n- The successful completion of this task will result in a robust and user-friendly scheduling interface that seamlessly integrates with the broader virtual bullet journal application. Users will be able to efficiently manage their time, set deadlines, and visualize their schedule through a modern and intuitive interface.""",
    "Issue ID":6,
    "State":"Open"
  },
  {
    "Title":"Implement Date and Time Picker",
    "Description":r"""<h2>Aims to enhance the scheduling interface by implementing a user-friendly date and time picker, providing users with precise control over their scheduling preferences.<\h2>\n\n<h1>Key Features:<\h1>\n\n<h2>Date Picker:<\h2>\n\n- An intuitive calendar-based date picker for selecting task dates.\n\n- Supports quick navigation through months and years.\n\n<h2>Time Picker:<\h2>\n\n- User-friendly interface for selecting specific times.\n- Options to choose hours and minutes for tasks.\n\n<h1>Frontend Components:<\h1>\n\n- Integrate a date and time picker component within the existing scheduling interface.\n\n- Ensure seamless interaction with the calendar view and task entry forms.\n\n<h1>Database Schema:<\h1>\n\n- No direct impact on the database schema for this task.\n\n<h1>Expected Outcome:<\h1>\n\n- Upon completion, users will experience an enhanced scheduling interface with the added functionality of a date and time picker. This feature provides a finer level of detail in task scheduling, empowering users to precisely set deadlines and appointments.""",
    "Issue ID":8,
    "State":"Open"
  },
  {
    "Title":"Develop Reminder Functionality",
    "Description":r"""<h1>Key Features:<\h1>\n\n<h2>Reminder Configuration:<\h2>\n\n- User-friendly settings for configuring reminders.\n\n- Options for selecting reminder times and notification preferences.\n\n<h2>Notification System:<\h2>\n\n- Seamless integration with a notification system for timely reminders.\n\n- In-app notifications and, if configured, email alerts.\n\n<h1>Frontend Components:<\h1>\n\n- Integrate reminder configuration settings within the scheduling interface.\n\n- Develop a notification system component for delivering reminders.\n\n<h1>Database Schema:<\h1>\n\n- Extend the database schema to include reminder-related information linked to tasks and events.\n\n<h1>Expected Outcome:<\h1>\n\n- Upon completion, users will have access to a sophisticated reminder system seamlessly integrated into the scheduling interface. This feature empowers users to stay organized and on track by receiving timely notifications for upcoming tasks and events.""",
    "Issue ID":9,
    "State":"Open"
  },
  {
    "Title":"AS a lecturer, I WANT TO plan and manage my lectures\assignments schedule for multiple courses SO THAT I can ensure a smooth academic semester",
    "Description":r"""**Acceptance criteria:**\n- [ ] Ability to create and manage schedules for multiple courses within the same platform.\n- [ ] Input options for course details such as course name, code, and description.\n- [ ] Capability to add lecture dates, times, topics, and locations for each course.\n- [ ] Notifications or reminders for upcoming lectures and assignment deadlines.\n\nThis user story is analyzed and defined into these features:\n- 5 Feature: Scheduling\n- 16 Feature: Timeline\calendar\n- 23 Feature: Tracking tasks progress""",
    "Issue ID":10,
    "State":"Closed"
  },
  {
    "Title":"AS A student, I WANT TO add my own task into the journal, SO THAT I can track my weekly schedule",
    "Description":r"""Acceptance criteria:\n- [ ] The product has a function to add individual tasks as todo\schedule items\n- [ ] Product has a timeline\calendar. Can work in a daily\weekly\monthly manner\n- [ ] Product's tasks can be placed onto the timeline\n- [ ] The tasks can be toggle between different states (todo, doing, done)""",
    "Issue ID":11,
    "State":"Open"
  },
  {
    "Title":"AS A student, I WANT TO note down my ideas SO THAT I can brainstorm using the notes",
    "Description":r"""**Acceptance criteria:**\n- [ ] The user is able to create and manage notes.\n- [ ] Enable quick search functionality to find specific notes or ideas.\n- [ ] Ensure data security and privacy measures to protect sensitive information.\n\nThe user story is analyzed and defined into this feature:\n- 17 Feature: Create personal notes""",
    "Issue ID":12,
    "State":"Open"
  },
  {
    "Title":"AS a student, I WANT TO create different categories, SO THAT I can categorize my notes",
    "Description":r"""**Acceptance criteria:**\n- [ ] The user can define different \"categories\" (e.g., study, work)\n- [ ] The user can assign their notes to the category they want\n- [ ] Each note can belong to multiple different categories\n- [ ] The product has a function to link categories\n- [ ] The product has a global search\filter\sort function to find notes by name\date\topic\etc.\n\nThis user story is analyzed and defined into this feature:\n- 19 Feature: Item categorization""",
    "Issue ID":13,
    "State":"Open"
  },
  {
    "Title":"AS a lecturer, I WANT TO perform advanced data analysis SO THAT I can monitor my productivity, student engagement.",
    "Description":r"""**Acceptance criteria:**\n- [ ] The user can perform data analysis based on events that happened in a defined period.\n- [ ] Access to relevant data sources, including lecture attendance records, assignment grades, student participation logs, etc.\n- [ ] Implement advanced data analysis algorithms or tools capable of processing large datasets.\n- [ ] Generate comprehensive reports on lecturer productivity metrics, such as time spent on lecture preparation, grading, and student interaction.\n- [ ] Visualize data analysis results using charts, graphs, or dashboards for easy interpretation.\n\n**This user story will be analyzed later due to low priority**""",
    "Issue ID":14,
    "State":"Open"
  },
  {
    "Title":"AS a freelance graphic designer, I WANT TO create a project timeline SO THAT I can stay on top of deadlines",
    "Description":r"""**Acceptance criteria:**\n- [ ] The user can create a new project timeline\n- [ ] The user can add tasks to the timeline with due dates\priorities\notes for each task\n- [ ] The user can break down the project into smaller tasks or milestones.\n\nThis user story is analyzed and defined into 2 smaller features:\n- 16 Feature: Timeline\calendar\n- 23 Feature: Tracking tasks progress""",
    "Issue ID":15,
    "State":"Open"
  },
  {
    "Title":"Feature: Timeline\calendar",
    "Description": r"""**Feature description**\n- The product has a calendar for users to monitor their tasks. When creating tasks, users can assign some duration (start date - due date) to them. Based on these defined dates, these tasks will be visible on the product\'s calendar.\n![example from Google Calendar]\n\n- The product has a timeline for users to track the progress of their individual tasks. With the tasks\' due date and time from the calendar, users can toggle the view to monitor their tasks in different time intervals (days - weeks - months - years). This feature is used to track\schedule the progress of the user's tasks.\n![example from asana]\n\n**Tasks**\n- [x] Define the user flow. Focus on how users can assign tasks to the calendar and later toggle the view to a timeline.\n- [x] UI\UX design for the feature. Define the main views and components ready for development.\n- [x] Database implementation. Linking the date and time in individual tasks to the calendar database.\n- [x] Backend implementation. Viewing\adding\removing\modifying tasks in the calendar.\n- [x] Frontend implementation. Build the frontend client based on the design.\n- [ ] Define the test suite for the feature and carry out tests.\n\n**Acceptance criteria**\n- [x] The basic user flow is defined.\n- [x] UI & UX design is finished with views ready for development.\n- [x] The system has a database dedicated to linking tasks to an event-based, timeline-dedicated database.\n- [x] The system has new backend endpoints to interact with this new database.\n- [x] Implement the design in the product\'s UI.\n- [x] The newly implemented feature is tested with unit tests and integration tests.\n- [ ] System test and possibly usability testing with end-users.\n\n**Potential feature risks**\n\n*Task integration issues*: Since this feature has a high complexity, we think it could be hard to integrate with other notes\task-tracking systems. This could be due to the number of tasks needed to be added, or incompatibility between different interfaces (between the tasks and the timeline). This could lead to display issues or incorrect scheduling, potentially blocking the development of one of the core features of the product.\n\n* **Likelihood:** High\n* **Impact:** High\n* **Overall Risk:** High""",
    "Issue ID":16,
    "State":"Closed"
  },
  {
    "Title":"Feature: Create personal notes",
    "Description": r"""**Feature description**\n\nThis will be one of the basic functionality of the product. The user can create many small notes, which they can revisit later. The newly created notes are stored inside the system's database, so that they persist in the user's personal storage.\n\n**Tasks**\n- [x] Design the note-taking system, including the basic user flow, database saving, backend, and frontend client, where the user will create the notes.\n- [x] UI and UX design for the note creation system. This will define the basic user flow and the frontend client's appearance.\n- [x] Build the database. This includes defining the schema and deciding how the notes are stored.\n- [x] Build the backend. The backend will provide the frontend client with different endpoints that can be used to read\write\update\delete the user's notes from the database.\n- [x] Implement the frontend, using the design and backend endpoints.\n- [x] Test the newly implemented feature.\n\n**Acceptance criteria**\n- [x] The basic user flow is defined.\n- [x] UI & UX design is finished with views ready for development.\n- [x] The system has a database dedicated to storing personal notes.\n- [x] The system has new backend endpoints to interact with this new database.\n- [x] Implement the design in the product's UI.\n- [x] The newly implemented feature is tested with unit tests and integration tests.\n- [x] System test and possibly usability testing with end-users.\n\n**Potential feature risks**\n\n*Poor feature design and implementation:* The design needs to be user-friendly and easy to use since this feature helps the users to put down their ideas and tasks quickly and conveniently. End users will not use our product if this basic feature is not designed and implemented well. The design and implementation need to be tested thoroughly with the team and experts.\n\n* **Likelihood:** Medium\n* **Impact:** High\n* **Overall Risk:** High""",
    "Issue ID":17,
    "State":"Closed"
  },
  {
    "Title":"Feature: Search Item",
    "Description":r"""This feature aims to create search components that allow users to find specific item(s)\n\n Acceptance criteria\n- [ ] Users should be able to search for items by entering keywords or phrase\n- [ ] The search should cover all relevant fields or attributes of items, such as titles, descriptions, dates, and categories.\n- [ ] Search results should be displayed in a clear and organized manner, with relevant details.\n- [ ] The search feature should be responsive and performant, even when dealing with large datasets or complex search queries.\n- [ ] The system should handle various error scenarios gracefully, such as invalid search queries, network issues, or server errors, providing informative feedback to the user when necessary.\n- [ ] The search functionality should be accessible to all users, including those with disabilities, by adhering to web accessibility standards and guidelines.\n\n Probability risks\n- **Incomplete Search Results:** The search algorithm may not accurately match user queries with relevant items, leading to incomplete or inaccurate search results.\n> - Lilyhood: Medium\n> - Impact: Low\n> - Overall: Low\n- **Performance Degradation:** As the dataset of items grows, the search functionality may experience performance issues, such as slow response times or system lag, especially if the search algorithm is not optimized.\n> - Lilyhood: High\n> - Impact: Medium\n> - Overall: Medium\n- **Cross-Browser Compatibility Issues:** The search feature may behave inconsistently or encounter compatibility issues across different web browsers or platforms.\n> - Lilyhood: Medium\n> - Impact: High\n> - Overall: High""",
    "Issue ID":18,
    "State":"Open"
  },
  {
    "Title":"Feature: Item categorization",
    "Description":r""" Feature description:\n\nThis feature aims to categorize items (tasks, notes, events, etc.) for better organize and manage journal content.\n\n Acceptance Criteria:\n\n- [ ] Implement a user interface for creating, editing, and deleting categories.\n- [ ] Allow users to assign one or multiple categories to each item in the journal.\n- [ ] Allow users to apply and filter categories across different views.\n- [ ] Ensure that categories are synced across devices for consistent organization.\n\n Possible risks:\n\n- **UI complexity**: The UI may become overly complex, leading to usability issues for users.\n> - Likelihood: Medium\n> - Impact: Medium\n> - Overall: Medium\n- **Data consistency**: Ensuring that categories remain consistent across different devices and platforms could pose challenges, especially in offline scenarios\n> - Likelihood: Medium\n> - Impact: High\n> - Overall: High\n- **User adoption**: Users may find it difficult to adapt to the new categorization features\n> - Likelihood: Medium\n> - Impact: High\n> - Overall: High""",
    "Issue ID":19,
    "State":"Open"
  },
  {
    "Title":"Feature: Edit item",
    "Description":r"""This feature aims to allow users to edit created item\n\n Acceptance criteria:\n- [ ] Users should be able to edit the content of existing items in the journal, including titles, descriptions, dates, categories, and any other relevant attributes. \n- [ ] All editable fields within an item should be identifiable and accessible for modification.\n- [ ] The system should validate user input and handle any errors or invalid data entries.\n- [ ] Changes made to item content or attributes should be reflected immediately\n- [ ] Users may have the ability to undo or redo changes made during the editing process.\n- [ ] Users should have the option to save their edits and apply them to the item permanently, as well as the option to cancel their edits and revert to the original item content without making any changes.\n- [ ] If a user attempts to navigate away from the editing interface without saving their changes, the system should display a confirmation prompt to prevent accidental loss of unsaved edits.\n\n Probability risk:\n- **Data Integrity Issues:** There is a risk of data integrity issues if the editing functionality does not properly validate user input or handle data conflicts.\n> - Lilyhood: High\n> - Impact: High\n> - Overall: High""",
    "Issue ID":20,
    "State":"Open"
  },
  {
    "Title":"Feature: Create task\todo\scheduled\reminder items",
    "Description":r"""<h1>Description<\h1>This feature aims to empower users to create various types of items within the virtual bullet journal, including tasks, todos, scheduled events, and reminders. Users will be able to add and manage these items to organize their daily, weekly, monthly, or yearly activities efficiently.\n\n<h1>Tasks<\h1>\n\n1. Design Item Creation Interface\n2. Implement Task Creation Functionality\n3. Add Todo List Creation Capability\n4. Incorporate Scheduled Events Creation\n5. Develop Reminder Creation Functionality""",
    "Issue ID":21,
    "State":"Closed"
  },
  {
    "Title":"AS a student, I WANT TO track the progress of my tasks SO THAT I can keep track of my work progress",
    "Description":r"""**User story analysis**\n- User can create personal notes that contain their tasks\n- User can keep track of their tasks through these notes - task description, task due date, and task detail\n- Tasks can be placed on a timeline\calendar\n- User can view their progress on a higher level through this timeline - how many % of a big task is done, or what needs to be done in order for the task to be completed\n\nThis user story is analyzed and defined into 2 smaller features:\n- 16 creates a timeline for the user to assign their tasks into\n- 17 enables user to create personal notes and other kind of tasks\n- 23 Feature: Tracking tasks progress""",
    "Issue ID":22,
    "State":"Closed"
  },
  {
    "Title":"Feature: Tracking tasks progress",
    "Description":r""" Feature description:\n\nThis feature aims to allow users to track tasks within the Virtual Bullet Journal application for effective management.\n\n Acceptance criteria:\n\n- [x] Allow users to categorize tasks by priority, deadline, and category.\n- [x] Provide options for setting reminders and notifications for upcoming tasks.\n- [x] Ensure that completed tasks can be marked as done and archived or hidden from view.\n- [x] Ensure that task data is synchronized across devices for seamless access and updates.\n\n**Removed ACs**\n- [ ] ~~Implement a user interface for creating, editing, and deleting tasks.~~\n- [ ] ~~Implement task filtering and sorting options for easy navigation and organization.~~\n\n Possible risks:\n\n- Data synchronization issues: Ensuring consistent data synchronization across devices may pose challenges, especially in cases of network disruptions or conflicts.\n> - Likelihood: Medium\n> - Impact: High\n> - Overall: High\n- UI Complexity and Usability: Designing a user-friendly interface for task management while accommodating various features and options may lead to UI complexity.\n> - Likelihood: Medium\n> - Impact: Medium\n> - Overall: Medium""",
    "Issue ID":23,
    "State":"Closed"
  },
  {
    "Title":"Development: Technology stack",
    "Description":r"""Chosen technology stack for the application (theoretically)""",
    "Issue ID":24,
    "State":"Closed"
  },
  {
    "Title":"Design Item Creation Interface",
    "Description":r""" Design Item Creation Interface\n\nThe objective of this task is to design and implement a user-friendly interface for creating various types of items within the virtual bullet journal. This interface will serve as a central hub for users to efficiently manage and organize their tasks, events, todos, and reminders.\n\n Key Features\n\n1. **Task Entry Form:**\n   - Create intuitive forms for adding new tasks, events, todos, and reminders to the virtual bullet journal.\n   - Include input fields for essential details such as title, description, due date\time, priority, and any additional relevant information.\n   - Ensure clear labeling and logical grouping of elements to facilitate easy data entry.\n\n2. **Calendar View Integration:**\n   - Seamlessly integrate the item creation interface with the calendar view to provide users with context while adding new items.\n   - Enable users to select specific dates for scheduling tasks, events, and reminders directly from the calendar interface.\n   - Implement visual indicators or cues to highlight days with existing items or scheduled events for improved navigation.\n\n3. **Drag-and-Drop Functionality:**\n   - Incorporate intuitive drag-and-drop features for effortless rearrangement of tasks and events within the calendar view.\n   - Allow users to easily reschedule items by dragging them to new dates or times, providing flexibility and ease of use.\n\n4. **Time Picker Enhancement:**\n   - Enhance the time picker functionality to allow users to specify precise times for appointments, meetings, and deadlines.\n   - Provide options for selecting hours, minutes, and AM\PM format to accommodate various scheduling preferences.\n   - Ensure seamless integration with the calendar view for a cohesive user experience.\n\n5. **Color Coding for Visual Differentiation:**\n   - Implement color-coding options to visually differentiate between different types of items such as tasks, events, todos, and reminders.\n   - Allow users to assign custom colors or choose from predefined color schemes to personalize their journaling experience.\n   - Use color cues to enhance user experience and facilitate quick identification of items within the calendar view.\n\n Implementation Details\n\n- **Frontend Components:**\n  - Utilize modern frontend frameworks such as React or Vue.js to develop responsive and dynamic item creation interfaces.\n  - Ensure consistency in design elements and layout across different screens to maintain a cohesive user experience.\n  \n- **Backend Integration:**\n  - Connect the item creation interface to the backend server to store and retrieve item data.\n  - Implement RESTful API endpoints for handling CRUD operations related to tasks, events, todos, and reminders.\n  - Ensure data validation and error handling mechanisms are in place to maintain data integrity and enhance user experience.\n\n Database Schema\n\n- Design an efficient database schema to store item-related information, considering factors such as user association, item details, due dates\times, priorities, and timestamps.\n- Optimize database indexing and relationships to ensure fast retrieval of item data and efficient query performance.\n\n Testing\n\n- Conduct thorough testing of the item creation interface to validate its functionality, usability, and compatibility across various devices and browsers.\n- Test scenarios should cover item creation, editing, deletion, validation checks, and responsiveness to different screen sizes and resolutions.\n\n Acceptance Criteria\n\nThe successful completion of this task will result in a user-friendly item creation interface that seamlessly integrates with the virtual bullet journal application. Users will be able to add and manage tasks, events, todos, and reminders efficiently, thereby enhancing their productivity and organization.""",
    "Issue ID":37,
    "State":"Closed"
  },
  {
    "Title":"Implement Task Creation Functionality",
    "Description":r""" Implement Task Creation Functionality\n\nThe objective of this task is to develop functionality that allows users to add tasks to the virtual bullet journal. This feature enables users to input task details and save them for future reference, facilitating efficient organization and management of their tasks.\n\n Key Features\n\n1. **Task Entry Form:**\n   - Develop an intuitive task entry form within the virtual bullet journal interface.\n   - Include input fields for essential task details such as title, description, due date\time, priority, and any additional relevant information.\n   - Ensure clear labeling and logical grouping of elements to guide users through the task creation process.\n\n2. **Due Date\Time Selection:**\n   - Enable users to specify due dates and times for tasks to establish deadlines and prioritize their activities.\n   - Provide options for selecting dates from a calendar view and times using a user-friendly time picker interface.\n   - Implement validation checks to ensure that due dates and times are entered accurately and in the correct format.\n\n3. **Priority Assignment:**\n   - Allow users to assign priorities to tasks to differentiate between urgent, important, and less critical items.\n   - Implement a priority selection mechanism, such as dropdown menus or radio buttons, to enable users to indicate the relative importance of tasks.\n   - Display priority levels prominently within the task entry form for easy reference and identification.\n\n4. **Save and Cancel Actions:**\n   - Provide options for users to save newly created tasks or cancel the task creation process.\n   - Implement save functionality to store task details in the backend database upon user confirmation.\n   - Include a cancel button or action to allow users to discard changes and return to the previous screen without saving.\n\n Implementation Details\n\n- **Frontend Components:**\n  - Develop frontend components, including form elements and user interface controls, for task creation using modern frameworks such as React or Vue.js.\n  - Ensure responsive design and compatibility with various screen sizes and resolutions to accommodate different devices and platforms.\n\n- **Backend Integration:**\n  - Connect the task creation functionality to the backend server to handle data storage and retrieval.\n  - Implement RESTful API endpoints for handling CRUD (Create, Read, Update, Delete) operations related to tasks, ensuring secure transmission of data between the frontend and backend.\n\n Testing\n\n- Conduct thorough testing of the task creation functionality to validate its correctness, reliability, and usability.\n- Test scenarios should cover various use cases, including creating tasks with different combinations of input data, handling edge cases such as invalid inputs or network errors, and verifying data persistence across sessions.\n\n Acceptance Criteria\n\nThe successful completion of this task will result in a robust and user-friendly task creation functionality within the virtual bullet journal application. Users will be able to effortlessly add new tasks, specify due dates and times, assign priorities, and save task details for future reference, thereby facilitating effective task management and organization.""",
    "Issue ID":38,
    "State":"Closed"
  },
  {
    "Title":"Add Todo List Creation Capability",
    "Description":r""" Add Todo List Creation Capability\n\nThe objective of this task is to extend the item creation interface within the virtual bullet journal to support the creation of todo lists or checklists. This feature empowers users to organize and manage tasks more effectively by breaking them down into smaller subtasks or checklist items.\n\n Key Features\n\n1. **Todo List Creation Form:**\n   - Develop a user-friendly form or interface for creating new todo lists within the virtual bullet journal.\n   - Include options for users to enter a title or description for the todo list, providing context for the associated tasks.\n   - Ensure intuitive navigation and clear labeling to guide users through the todo list creation process.\n\n2. **Subtask Entry Fields:**\n   - Enable users to add multiple subtasks or checklist items within a todo list.\n   - Provide input fields or checkboxes for users to enter the details of each subtask, including task titles, descriptions, due dates, and completion status.\n   - Implement functionality for dynamically adding and removing subtasks to accommodate varying list lengths.\n\n3. **Due Date and Priority Settings:**\n   - Allow users to specify due dates and priorities for individual subtasks to better organize their todo lists.\n   - Provide options for selecting due dates from a calendar view and assigning priorities using dropdown menus or radio buttons.\n   - Display due dates and priorities prominently within the todo list interface for easy reference and management.\n\n4. **Save and Cancel Actions:**\n   - Implement save functionality to store newly created todo lists and their associated subtasks in the backend database upon user confirmation.\n   - Include a cancel button or action to allow users to discard changes and return to the previous screen without saving.\n   - Provide feedback to users upon successful saving of todo lists and subtasks, confirming that their data has been recorded.\n\n Implementation Details\n\n- **Frontend Components:**\n  - Develop frontend components, including forms, input fields, and list displays, for todo list creation using modern frontend frameworks like React or Vue.js.\n  - Ensure responsiveness and accessibility to support a seamless user experience across different devices and screen sizes.\n\n- **Backend Integration:**\n  - Connect the todo list creation functionality to the backend server to handle data storage and retrieval.\n  - Extend existing RESTful API endpoints or create new ones to support CRUD operations related to todo lists and their associated subtasks.\n\n Testing\n\n- Conduct thorough testing of the todo list creation capability to validate its functionality, usability, and reliability.\n- Test scenarios should cover various use cases, including creating todo lists with different numbers of subtasks, setting due dates and priorities, and saving and retrieving todo list data from the backend.\n\n Acceptance Criteria\n\nThe successful completion of this task will result in the addition of todo list creation capability within the virtual bullet journal application. Users will be able to create todo lists, add and manage multiple subtasks within each list, specify due dates and priorities, and save todo list data for future reference, thereby facilitating efficient task organization and management.""",
    "Issue ID":39,
    "State":"Closed"
  },
  {
    "Title":"Incorporate Scheduled Events Creation",
    "Description":r""" Incorporate Scheduled Events Creation\n\nThe objective of this task is to enhance the item creation interface within the virtual bullet journal to accommodate the creation of scheduled events or appointments. This feature enables users to schedule and manage their events, meetings, and appointments effectively within the journaling app.\n\n Key Features\n\n1. **Event Creation Form:**\n   - Develop an intuitive form or interface for creating new scheduled events within the virtual bullet journal.\n   - Include input fields for users to enter event details such as title, description, location, start\end dates and times, and any additional relevant information.\n   - Ensure clear labeling and logical grouping of elements to facilitate easy data entry and comprehension.\n\n2. **Date and Time Selection:**\n   - Enable users to specify start and end dates and times for scheduled events to accurately represent event durations.\n   - Provide options for selecting dates from a calendar view and times using a user-friendly time picker interface.\n   - Implement validation checks to ensure that start and end dates and times are entered accurately and in the correct format.\n\n3. **Location and Description Input:**\n   - Allow users to input the location or venue of the scheduled event, providing context for attendees or participants.\n   - Include a description field for users to add additional information or notes about the event, such as agenda items or meeting topics.\n\n4. **Reminder Integration:**\n   - Seamlessly integrate the scheduled events creation interface with the reminder system to enable users to set up reminders for upcoming events.\n   - Provide options for users to configure reminder times and notification preferences directly from the event creation form.\n   - Implement in-app notifications and, if configured, email alerts to remind users of upcoming scheduled events.\n\n Implementation Details\n\n- **Frontend Components:**\n  - Develop frontend components, including forms, input fields, and date\time pickers, for scheduled event creation using modern frontend frameworks such as React or Vue.js.\n  - Ensure responsive design and compatibility with various screen sizes and resolutions to provide a consistent user experience.\n\n- **Backend Integration:**\n  - Connect the scheduled event creation functionality to the backend server to handle data storage and retrieval.\n  - Extend existing RESTful API endpoints or create new ones to support CRUD operations related to scheduled events, ensuring secure transmission of data between the frontend and backend.\n\n Testing\n\n- Conduct thorough testing of the scheduled events creation capability to validate its correctness, reliability, and usability.\n- Test scenarios should cover various use cases, including creating events with different durations, setting reminders, and verifying data persistence across sessions.\n\n Acceptance Criteria\n\nThe successful completion of this task will result in the incorporation of scheduled events creation capability within the virtual bullet journal application. Users will be able to create and manage events, specify event details including dates, times, locations, and descriptions, set up reminders for upcoming events, and receive timely notifications, thereby facilitating effective event scheduling and management.""",
    "Issue ID":40,
    "State":"Closed"
  },
  {
    "Title":"Develop Reminder Creation Functionality",
    "Description":r""" Develop Reminder Creation Functionality\n\nThe objective of this task is to implement functionality that allows users to set up reminders for tasks, events, todos, and other items within the virtual bullet journal. This feature empowers users to stay organized and on track by receiving timely notifications for upcoming activities and deadlines.\n\n Key Features\n\n1. **Reminder Configuration Settings:**\n   - Develop user-friendly settings for configuring reminders within the virtual bullet journal interface.\n   - Provide options for users to specify reminder times, frequencies, and notification preferences based on their scheduling preferences.\n   - Include intuitive controls and dropdown menus for selecting reminder intervals, such as minutes, hours, days, or custom time frames.\n\n2. **Notification System Integration:**\n   - Seamlessly integrate the reminder creation functionality with the notification system to deliver timely reminders to users.\n   - Implement in-app notifications to alert users of upcoming tasks, events, todos, and reminders within the virtual bullet journal interface.\n   - Provide options for users to receive email alerts or push notifications on mobile devices for added flexibility and convenience.\n\n3. **In-App Reminder Management:**\n   - Enable users to view, edit, or delete existing reminders from within the virtual bullet journal interface.\n   - Provide intuitive controls and actions for managing reminders, such as snoozing or dismissing notifications, updating reminder times, or disabling reminders for specific items.\n\n4. **Customization Options:**\n   - Allow users to customize reminder settings on a per-item basis to accommodate different scheduling needs and preferences.\n   - Provide options for users to enable or disable reminders for individual tasks, events, todos, and reminders based on their importance or relevance.\n\n Implementation Details\n\n- **Frontend Components:**\n  - Develop frontend components, including settings panels, notification controls, and reminder management interfaces, using modern frontend frameworks like React or Vue.js.\n  - Ensure seamless integration with the existing user interface and navigation flows to provide a cohesive user experience.\n\n- **Backend Integration:**\n  - Connect the reminder creation functionality to the backend server to handle reminder data storage, retrieval, and management.\n  - Implement RESTful API endpoints for handling CRUD operations related to reminders, ensuring secure transmission of data between the frontend and backend.\n\n Testing\n\n- Conduct thorough testing of the reminder creation functionality to validate its correctness, reliability, and usability.\n- Test scenarios should cover various use cases, including configuring reminders for different types of items, receiving notifications, and managing reminders effectively.\n\n Acceptance Criteria\n\nThe successful completion of this task will result in the development of reminder creation functionality within the virtual bullet journal application. Users will be able to configure reminders for tasks, events, todos, and reminders, customize reminder settings based on their preferences, receive timely notifications, and manage reminders effectively, thereby facilitating efficient task management and organization.""",
    "Issue ID":41,
    "State":"Closed"
  },
  {
    "Title":"Feature: Sort items",
    "Description":r"""This feature aims to create sort components that allow users to sort created items\n\n Acceptance criteria\n- [ ] Users should be able to sort items based on various attributes, such as title, date, priority, category, or status.\n- [ ] Users should have the option to sort items in both ascending and descending order for each sortable attribute.\n- [ ] Changes to the sorting criteria should reflect immediately in the display of items, providing users with real-time feedback on the sorted order.\n- [ ] Users should be able to apply multiple levels of sorting to organize items hierarchically, such as sorting by date first and then by priority within each date.\n- [ ] Optionally, users may have the ability to manually reorder items by dragging and dropping them within the journal interface, providing an intuitive and interactive sorting method.\n\n Probability risk\n- **Sorting Algorithm Complexity:** Implementing a sorting algorithm capable of efficiently handling various attributes and sorting criteria may pose challenges, especially if the dataset is large or if complex sorting logic is required.\n> - Lilyhood: Medium\n> - Impact: Medium\n> - Overall: Medium\n- **Performance Degradation:** As the number of items increases, the sorting functionality may experience performance issues, such as slow response times or system lag, particularly if the sorting algorithm is not optimized.\n> - Lilyhood: High\n> - Impact: High\n> - Overall: High\n- **User Interface Complexity:** The sorting interface may become overly complex or cluttered with too many options or sorting criteria, potentially overwhelming users and reducing usability.\n> - Lilyhood: Medium\n> - Impact: Medium\n> - Overall: Medium""",
    "Issue ID":47,
    "State":"Open"
  },
  {
    "Title":"Feature: Delete item",
    "Description":r"""This feature aims to allow users to delete created items.\n\n Acceptance criteria:\n- [ ] Users should be able to delete a single item or multiple items from the journal in a single action, providing flexibility in managing their journal entries.\n- [ ] Before deleting an item or batch of items, the system should display a confirmation prompt to ensure that the user intends to delete the selected items, preventing accidental deletions.\n- [ ] Deleting a parent item should automatically delete all associated child items, ensuring data consistency and preventing orphaned records.\n- [ ] Deleted items should be moved to an archive or recycle bin instead of being permanently erased from the system immediately, allowing users to restore deleted items if needed.\n\n Probability risk\n- **Accidental Deletions:** Users accidentally delete items, especially if the delete action is easily triggered or if there is insufficient confirmation or undo functionality in place.\n> - Lilyhood: Medium\n> - Impact: High\n> - Overall: High\n- **Data Loss:** There is a risk of data loss if deleted items are not properly archived or if there are no mechanisms in place to recover accidentally deleted entries, leading to permanent loss of important information.\n> - Lilyhood: Medium\n> - Impact: High\n> - Overall: High""",
    "Issue ID":48,
    "State":"Open"
  },
  {
    "Title":"Design: UX-UI for checking attendance",
    "Description":"",
    "Issue ID":79,
    "State":"Closed"
  },
  {
    "Title":"Feature: Checking attendance",
    "Description":r"""Feature description:A feature for checking attendance to receive points can enhance user engagement by incentivizing regular usage\n\n Acceptance criteria:\n- [x] The application should accurately track user attendance based on their login activity.\n- [x] Users should receive points for each day they log in and check attendance.\n- [x] Users should be able to redeem accumulated points for rewards or virtual badges.\n- [x] Users should receive reminders or notifications to check attendance daily.\n\n Possible risks:\n- False Attendance Reporting: Users may attempt to manipulate the system by logging in without actually using the application, leading to inaccurate attendance records.\n> - Likelihood: Medium\n> - Impact: High\n> - Overall: High\n- Gamification Overemphasis: Focusing too much on gamification elements like attendance points may detract from the core functionality of the Virtual Bullet Journal, leading to a shallow user experience.\n> - Likelihood: Low\n> - Impact: Medium\n> - Overall: Medium\n- Technical Challenges: Implementing accurate attendance tracking and point allocation functionalities may pose technical challenges, particularly in ensuring reliability and scalability.\n> - Likelihood: Medium\n> - Impact: Medium\n> - Overall: Medium""",
    "Issue ID":80,
    "State":"Closed"
  },
  {
    "Title":"Feature: Frame Template for items",
    "Description":r"""A feature for frames or templates for items can provide users with predefined structures for organizing their tasks and notes, enhancing productivity and organization.\n\n Acceptance criteria:\n- [x] Templates should be intuitive and easy to use, with clear instructions or guidance provided to users.\n- [x] Users should have the ability to customize templates by adding, removing, or rearranging sections and elements to suit their specific needs.\n- [x] Users should be able to apply templates to individual items or batches of items\n- [x] Templates should maintain consistency in formatting and layout across different devices and screen sizes.\n- [x] Templates should accommodate a wide range of use cases and user preferences, allowing for both simple and complex item structures.\n- [x] Templates should be compatible with existing features\n\n Probability risk\n- Template Consistency: Ensuring consistency in formatting and layout across different templates and devices may be challenging, leading to inconsistencies in user experience.\n> - Lilyhood: High\n> - Impact: High\n> - Overall: High\n- Template Maintenance: Managing a library of templates and ensuring their compatibility may require ongoing maintenance and support.\n> - Lilyhood: Medium\n> - Impact: High\n> - Overall: High""",
    "Issue ID":86,
    "State":"Closed"
  },
  {
    "Title":"Feature: Achievements badge",
    "Description":r"""A feature for achievement badges can gamify the user experience and incentivize users to engage more actively with the application.\n\n Acceptance criteria:\n- [x] Define different types of achievements badges based on user actions or milestones\n- [x] Ensure that badges are prominently displayed within the application\n- [x] Provide users with visibility into their progress towards unlocking badges\n- [x] Consider offering rewards or benefits associated with earning badges\n- [x] Ensure that badges are accessible to all users, including those with visual impairments or other accessibility needs, by providing alternative text descriptions or audio cues.\n- [x] Respect user privacy preferences by allowing users to opt out of displaying their badges publicly or sharing their achievements with others.\n\n Probability risk\n- Users may engage in undesirable behavior, such as gaming the system or focusing solely on tasks that earn badges rather than those that are genuinely productive.\n> - Lilyhood: Medium\n> - Impact: Medium\n> - Overall: Medium\n- Implementing badge functionality may introduce technical challenges related to tracking user actions, managing badge data, and ensuring system performance and scalability.\n> - Lilyhood: Medium\n> - Impact: High\n> - Overall: High\n- Users may lose interest in earning badges if they are perceived as too difficult to achieve or if the rewards associated with them are not sufficiently motivating.\n> - Lilyhood: Medium\n> - Impact: Low\n> - Overall: Medium""",
    "Issue ID":95,
    "State":"Closed"
  },
  {
    "Title":"Feature: Unlocking rewards (badges) with points",
    "Description":r"""Implementing a feature for unlocking rewards (badges) with points can provide users with additional incentives to engage with the application and accomplish tasks. \n\n Acceptance criteria:\n- [ ] Establish a point system, where users earn points by checking attendance.\n- [ ] Display users' point balances prominently within the application, allowing them to track their progress toward unlocking badges.\n- [ ] Implement mechanisms for users to redeem their points to unlock badges.\n- [ ] Ensure that users can view the badges they have unlocked and the badges they are currently working towards unlocking, providing visibility into their achievements and goals.\n- [ ] Ensure that badge unlocking criteria and point costs are transparent and consistent across all users, preventing unfair advantages or discrepancies.\n\n Probability risk\n- Point Inflation: Users may accumulate points too quickly or easily, diminishing the value of badges and reducing their perceived significance.\n> - Lilyhood: Medium\n> - Impact: Medium\n> - Overall: Medium\n- Technical Complexity: Implementing point and badge functionality may introduce technical challenges related to tracking user actions, managing point balances, and ensuring system performance and scalability.\n> - Lilyhood: High\n> - Impact: High\n> - Overall: High""",
    "Issue ID":102,
    "State":"Open"
  }
]

def get_jira_tickets():
    """This function mocks the JIRA tickets."""
    return JIRA_TICKETS
